version: '3.8'

networks:
  integration-network:
    driver: bridge

services:
  # MongoDB with test data initialization
  mongodb-test:
    image: mongo:latest
    container_name: mongodb-test
    environment:
      MONGO_INITDB_ROOT_USERNAME: testuser
      MONGO_INITDB_ROOT_PASSWORD: testpass
      MONGO_INITDB_DATABASE: figure_collector_test
    ports:
      - "27018:27017"  # Use different external port to avoid conflicts
    volumes:
      - ./init-db.js:/docker-entrypoint-initdb.d/init-db.js
      - mongodb_test_data:/data/db
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 15s
      timeout: 10s
      retries: 8
      start_period: 60s

  # Backend service - built from production Dockerfile with test environment
  backend-test:
    build:
      context: ../figure-collector-backend
      dockerfile: Dockerfile
      target: production
    container_name: backend-test
    ports:
      - "5055:5055"
    environment:
      - NODE_ENV=test
      - PORT=5055
      - MONGODB_URI=mongodb://testuser:testpass@mongodb-test:27017/figure_collector_test?authSource=admin
      - SCRAPER_SERVICE_URL=http://scraper-test:3005
      - VERSION_MANAGER_URL=http://version-manager-test:3006
      - JWT_SECRET=test-jwt-secret-for-integration-tests-must-be-32-chars
      - JWT_REFRESH_SECRET=test-refresh-secret-for-integration-tests-32-chars
      - SERVICE_AUTH_TOKEN=test-service-auth-token-for-integration
    depends_on:
      mongodb-test:
        condition: service_healthy
      version-manager-test:
        condition: service_healthy
      scraper-test:
        condition: service_healthy
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "node", "-e", "const req = require('http').get('http://localhost:5055/health', { timeout: 5000 }, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('timeout', () => { req.destroy(); process.exit(1); }); req.on('error', () => process.exit(1));"]
      interval: 15s
      timeout: 10s
      retries: 6
      start_period: 30s

  # Version manager - lightweight service for version management
  version-manager-test:
    build:
      context: ../version-manager
      dockerfile: Dockerfile
      target: production
    container_name: version-manager-test
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=test
      - PORT=3006
      - SERVICE_AUTH_TOKEN=test-service-auth-token-for-integration
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3006/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Page scraper service - web scraping with Puppeteer
  scraper-test:
    build:
      context: ../page-scraper
      dockerfile: Dockerfile
      target: production
    container_name: scraper-test
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=test
      - PORT=3005
      - VERSION_MANAGER_URL=http://version-manager-test:3006
      - SERVICE_AUTH_TOKEN=test-service-auth-token-for-integration
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3005/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s
    # Add security and resource constraints for Puppeteer
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    shm_size: 2gb

  # Frontend service - React application with nginx server
  frontend-test:
    build:
      context: ../figure-collector-frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: http://backend-test:5055
    container_name: frontend-test
    ports:
      - "5056:80"
    environment:
      - BACKEND_HOST=backend-test
      - BACKEND_PORT=5055
      - FRONTEND_PORT=80
    depends_on:
      backend-test:
        condition: service_healthy
    networks:
      - integration-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:80', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Integration test runner - executes the actual integration tests
  integration-tests:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: integration-tests
    environment:
      - NODE_ENV=test
      - BACKEND_URL=http://backend-test:5055
      - FRONTEND_URL=http://frontend-test:80
      - SCRAPER_URL=http://scraper-test:3005
      - VERSION_MANAGER_URL=http://version-manager-test:3006
      - MONGODB_URI=mongodb://testuser:testpass@mongodb-test:27017/figure_collector_test?authSource=admin
      - TEST_TIMEOUT=180000
      - COVERAGE_ENABLED=true
    depends_on:
      backend-test:
        condition: service_healthy
      frontend-test:
        condition: service_healthy
      scraper-test:
        condition: service_healthy
      version-manager-test:
        condition: service_healthy
      mongodb-test:
        condition: service_healthy
    networks:
      - integration-network
    volumes:
      - ./test-results:/app/test-results
      - ./integration-test-results:/app/integration-test-results
    command: ["npm", "run", "test:integration"]

volumes:
  mongodb_test_data:
    driver: local