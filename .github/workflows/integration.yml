name: Integration Tests CI

on:
  push:
    branches: [develop, main, feature/*]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

env:
  REGISTRY_URL: ghcr.io/rpgoldberg
  NODE_ENV: test

jobs:
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund
        timeout-minutes: 2

      - name: Create test directories
        run: |
          mkdir -p test-results
          mkdir -p coverage
          chmod 777 test-results
          chmod 777 coverage
          echo "Created test directories with write permissions"

      # Login to GitHub Container Registry to pull images
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Determine which image tags to use based on context
      - name: Set image tags
        run: |
          # Default to develop tags
          BACKEND_TAG="develop"
          FRONTEND_TAG="develop"
          SCRAPER_TAG="develop"
          VERSION_TAG="develop"

          # For PRs, check if PR-specific images exist
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "PR #${PR_NUMBER} detected, checking for PR-specific images..."

            # Check if PR images exist (optional - can fallback to branch)
            if docker manifest inspect ${{ env.REGISTRY_URL }}/figure-collector-backend:pr-${PR_NUMBER} > /dev/null 2>&1; then
              BACKEND_TAG="pr-${PR_NUMBER}"
              echo "Found PR-specific backend image: pr-${PR_NUMBER}"
            fi
          fi

          # For feature branches, use branch name if images exist
          if [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
            BRANCH_NAME="${{ github.ref_name }}"
            BRANCH_TAG="${BRANCH_NAME//\//-}" # Replace / with -
            echo "Feature branch detected: ${BRANCH_NAME}"

            # Check if branch-specific images exist
            if docker manifest inspect ${{ env.REGISTRY_URL }}/figure-collector-backend:${BRANCH_TAG} > /dev/null 2>&1; then
              BACKEND_TAG="${BRANCH_TAG}"
              FRONTEND_TAG="${BRANCH_TAG}"
              SCRAPER_TAG="${BRANCH_TAG}"
              VERSION_TAG="${BRANCH_TAG}"
              echo "Using branch-specific images: ${BRANCH_TAG}"
            fi
          fi

          # Export tags for use in next steps
          echo "BACKEND_TAG=${BACKEND_TAG}" >> $GITHUB_ENV
          echo "FRONTEND_TAG=${FRONTEND_TAG}" >> $GITHUB_ENV
          echo "SCRAPER_TAG=${SCRAPER_TAG}" >> $GITHUB_ENV
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV

          echo "Using image tags:"
          echo "  Backend:  ${BACKEND_TAG}"
          echo "  Frontend: ${FRONTEND_TAG}"
          echo "  Scraper:  ${SCRAPER_TAG}"
          echo "  Version:  ${VERSION_TAG}"

      # Validate Docker Compose configurations
      - name: Validate Docker Compose files
        run: |
          docker compose -f docker-compose.integration.yml config
          docker compose -f docker-compose.prebuilt.yml config

      # Start services using pre-built images with specified tags
      - name: Start services
        run: |
          # Create directories that will be mounted as volumes
          # These need to exist and be writable before container starts
          mkdir -p test-results
          mkdir -p integration-test-results
          chmod -R 777 test-results
          chmod -R 777 integration-test-results
          echo "Created volume mount directories with full permissions"

          # Export tags for docker-compose
          export BACKEND_TAG FRONTEND_TAG SCRAPER_TAG VERSION_TAG

          echo "Starting services with tags:"
          echo "  BACKEND_TAG=${BACKEND_TAG}"
          echo "  FRONTEND_TAG=${FRONTEND_TAG}"
          echo "  SCRAPER_TAG=${SCRAPER_TAG}"
          echo "  VERSION_TAG=${VERSION_TAG}"

          docker compose -f docker-compose.prebuilt.yml up -d

          # Wait for services to be healthy
          echo "Waiting for services to be ready..."
          sleep 30

          # Check service health
          docker compose -f docker-compose.prebuilt.yml ps

          # Check logs if needed for debugging
          docker compose -f docker-compose.prebuilt.yml logs --tail=50

      # Run integration tests
      - name: Run integration tests
        timeout-minutes: 10
        run: |
          # Export tags for docker-compose
          export BACKEND_TAG FRONTEND_TAG SCRAPER_TAG VERSION_TAG

          # Run integration tests container
          # This will use the volumes we created with proper permissions
          docker compose -f docker-compose.prebuilt.yml run --rm integration-tests

          # Check exit code
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ Integration tests passed!"
          else
            echo "❌ Integration tests failed with exit code: $EXIT_CODE"
            exit $EXIT_CODE
          fi
        env:
          CI: true
          NODE_ENV: test

      # Collect test results
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage/

      # Cleanup
      - name: Stop services
        if: always()
        run: |
          # Export tags for docker-compose (needed for down command)
          export BACKEND_TAG FRONTEND_TAG SCRAPER_TAG VERSION_TAG
          docker compose -f docker-compose.prebuilt.yml down -v
          docker system prune -f

      # Report test status
      - name: Test Summary
        if: always()
        run: |
          if [ -f test-results/integration-test-results.xml ]; then
            echo "Test results generated successfully"
          else
            echo "Warning: Test results file not found"
          fi